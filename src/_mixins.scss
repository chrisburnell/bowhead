////
/// Mixins
////

///
/// Output a property, CSS Variable, and, optionally, SCSS value
///
/// @author Chris Burnell
///
/// @param {String} $property - key from $bowhead-property-map or $bowhead-tokens
/// @param {String} $value [default] - key from inner map
/// @param {Boolean} $show-fallback [false] - if the SCSS value should be shown
///
/// @example scss
///   @include v(padding, small);
///   // padding: var(--measure-small);
/// @example scss
///   @include v(padding, small, true);
///   // padding: 0.625rem;
///   // padding: var(--measure-small);
///
/// @return Associated property and CSS Variable or SCSS value
///
@mixin v($property, $value: default, $show-fallback: $bowhead-show-fallback) {
    // leverage the v() function and output the CSS Variable(s) and optionally
    // the respective SCSS value(s) as well as the property
    @if $show-fallback {
        #{$property}: v($property, $value, true);
    }
    #{$property}: v($property, $value);
}


///
/// Output properties and values for all defined themes
///
// @mixin t($properties...) {
//     @each $theme, $data in $themes {
//         @if $theme == "light" {
//             @each $property in $properties {
//                 @if map-has-key($data, $property) {
//                     $property-clean: nth(str-split($property, "--"), 1); // first item in the array
//                     @include v($property-clean, map-get($data, $property));
//                 }
//             }
//         } @else {
//             .theme--#{$theme} & {
//                 @each $property in $properties {
//                     @if map-has-key($data, $property) {
//                         $property-clean: nth(str-split($property, "--"), 1); // first item in the array
//                         @include v($property-clean, map-get($data, $property));
//                     }
//                 }
//             }
//         }
//     }
// }
