////
/// Functions
////

///
/// Output a property's CSS Cariable or SCSS value
///
/// @author Chris Burnell
///
/// @param {String} $property - key from $bowhead-property-map or $bowhead-tokens
/// @param {String} $value [default] - key from inner map
/// @param {Boolean} $fallback [false] - toggles the computed fallabck value
///
/// @example scss
///   padding: v(measure, small) v(measure, medium);
///   // padding: var(--measure-small) var(--measure-medium);
/// @example scss
///   padding: v(measure, small, true) v(measure, medium, true);
///   // padding: 0.625rem 1.25rem;
///
/// @throw Error if $property doesn't exist in $property
/// @throw Error if $value passed doesn't exist in the map passed by $property
///
/// @return Associated CSS Variable or SCSS value
///
@function v($property, $value: default, $fallback: false) {
    $generic-values: auto, inherit, initial, none, revert, unset, 0, 1, 100%, currentColor;
    @if (index($generic-values, $value)) {
        @return $value;
    }
    @else {
        // if we're passing in a key in the variables Map (e.g. measure)
        @if map-has-key($bowhead-tokens, $property) {
            $map-variables: map-get($bowhead-tokens, $property);

            // throw a warning if the value does not exist in the associated Map
            @if not map-has-key($map-variables, $value) {
                @warn "There is no value named `#{$value}` in the variable list. The value should be one of `#{map-keys($map-variables)}`.";
            }

            @if $fallback {
                @return map-get($map-variables, $value);
            } @else {
                @return var(--#{$property}-#{$value});
            }
        }
        // otherwise we're passing in a value from the properties Map (e.g. fill)
        @else if map-has-key($bowhead-property-map, $property) {
            $map-properties: map-get($bowhead-property-map, $property);
            $nest-name: null;
            $nest-map-name: null;
            $map: null;
            $variable-fallback: null;
            $variable-output: null;

            // if a Nested List, we need to go deeper
            @if type-of($map-properties) == list {
                $nest-name: nth($map-properties, 1);
                $nest-map-name: nth($map-properties, 2);
            }

            // if it is a Nested List
            @if $nest-name {
                // get the map from nested map-name
                $map: map-get($bowhead-tokens, $nest-name);
                // get the nested map
                $nest-map: map-get($map, $nest-map-name);

                // throw a warning if the value does not exist
                @if not map-has-key($nest-map, $value) {
                    @warn "There is no value named `#{$value}` in the `#{$nest-name}` variable list. The value should be one of `#{map-keys($nest-map)}`.";
                }

                @if $fallback {
                    @return map-get($nest-map, $value);
                } @else {
                    @return var(--#{$nest-name}-#{$nest-map-name}-#{$value});
                }
            } @else {
                // get the map from map name
                $map: map-get($bowhead-tokens, $map-properties);

                // throw a warning if the value does not exist
                @if not map-has-key($map, $value) {
                    @warn "There is no value named `#{$value}` in the `#{$map-properties}` variable map. The value should be one of `#{map-keys($map)}`.";
                }

                @if $fallback {
                    @return map-get($map, $value);
                } @else {
                    @return var(--#{$map-properties}-#{$value});
                }
            }
        } @else {
            // throw a warning if the property does not exist
            @warn "There is no property named `#{$property}` in the variable or property map. The value should be one of `#{map-keys(map-merge($bowhead-tokens, $bowhead-property-map))}`.";
        }
    }
}
